//--------------------------------------------------------------
// 0. Density independent pixels
//--------------------------------------------------------------

//TODO: Javascript in overrides.js uses 140 and 160 for
// mobile and desktop so this can only be 140 or 160 at the moment
$density: 140 !default; // LARGE SCREEN
$font-scale: 1 !default;
$resourcePath: './' !default;

@function dp($width) {
  @return (($width * $density) / 160) *1px;
}
@function sp($size) {
  @return ceil(dp($size) * $font-scale);
}

$layout-xs:     600px !default;
$layout-sm:     960px !default;
$layout-md:     1280px !default;
$layout-lg:     1920px !default;

$borderRadius: dp(4) !default;

// Bezier easing curve 
$curve-standard: cubic-bezier(0.4, 0.0, 0.2, 1);
$curve-deceleration: cubic-bezier(0.0, 0.0, 0.2, 1);
$curve-acceleration: cubic-bezier(0.4, 0.0, 1, 1);
$curve-sharp: cubic-bezier(0.4, 0.0, 0.6, 1);
$curve-sharper: cubic-bezier(.25, .8, .25, 1); //slider

// for providing a fallback for browser not supporting css variables
// used for developemnt in PHP replace "var(--c-primary)" with actual configured color for IE support
// If not replaced IE will default to the color set in $cPrimary

//Example use:
// @include var(color, c-accent);
$vars: (
    c-primary: $cPrimary,
    c-primary-tp: $cPrimaryTp,
    c-header-bg: $cHeaderBg,
	c-secondary: $cSecondary,
    c-accent: $cAccent,
	c-accent-tp: $cAccentTp
) !default;


@mixin var($property, $varName) {
  #{$property}: map-get($vars, $varName);
  #{$property}: var(--#{$varName}, map-get($vars, $varName));
}

//------------------------------------------------
// Layouts and backgrounds
//------------------------------------------------

%badge {
	vertical-align: text-bottom;
	display: inline-block;
	font-size: sp(13);
	font-weight: 600;
	color: rgba(white, 0.87);
	//margin-top: dp(1.5);
	min-width:dp(21);
	height:dp(21);
	padding: 0 dp(4);
	line-height:dp(21);
	letter-spacing: 0;
	text-align:center;
	border-radius: dp(10.5); // only round with 1 char
	background-color: #727272; //color($fg, 'secondary-text');
	
  .x-tree-node & {
    //position: absolute;
    //right: 8px;
  }
}

%hover {
	background-color: $cHover;
	@include var(color, c-primary);
}



%hidden {
    visibility: hidden;
    position: absolute;
    opacity:0;
    overflow:hidden;
}

%icon {
	display: inline-block;
  font-family: 'Material Icons';
  font-weight: normal;
  font-style: normal;
  font-size: dp(24);  /* Preferred icon size */
/*	max-width: dp(24);
	max-height: dp(24);*/
	color:inherit;
  width: auto;
  height: auto;
  line-height: 1;
  text-transform: none;
  letter-spacing: normal;
  vertical-align:middle;
  word-wrap: normal;
  white-space: nowrap;
  direction: ltr;
  -webkit-font-smoothing: antialiased; // Support for all WebKit browsers.
  text-rendering: optimizeLegibility; // Support for Safari and Chrome.
  -moz-osx-font-smoothing: grayscale; // Support for Firefox.
  font-feature-settings: 'liga'; // Support for IE
}
 
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  
  @return $string;
}
